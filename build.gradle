plugins {
    id "com.vanniktech.maven.publish" version '0.9.0' apply false
    id 'com.github.ben-manes.versions' version '0.28.0' apply false
    id 'org.owasp.dependencycheck' version '5.3.0' apply false
    id "com.github.spotbugs" version "3.0.0" apply false
}

// Split projects into buildable: examples and libraries (including frameworks). 
// This omits 'wrapper' directories. See also settings.gradle
 
def buildProjects() {
    subprojects.findAll { new File(it.projectDir, 'build.gradle').file  }
}

def exampleProjects() {
    buildProjects().findAll { it.name.endsWith("-example") || it.projectDir.path.substring(rootProject.projectDir.path.length()).contains('examples') }
}

def libraryProjects() {
    buildProjects().findAll { !exampleProjects().contains(it)  }
}

configure(exampleProjects()) {
    apply plugin: 'java'
}

configure(libraryProjects()) {
    apply plugin: 'java-library'
}

configure(buildProjects()) {
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'com.github.spotbugs'
    
    sourceCompatibility = 1.8
    
    ext {
        junitPlatformVersion = '1.6.0'
        junitJupiterVersion  = '5.6.0'
        googleTruthVersion   = '1.0.1'
    }
    
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    
        reports {
            html.enabled = true
        }
    }
    
    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

        testImplementation ("com.google.truth:truth:${googleTruthVersion}")
        testImplementation ("com.google.truth.extensions:truth-java8-extension:${googleTruthVersion}")
    }
 }

// projects which should be published
configure(libraryProjects()) {
    apply plugin: 'com.vanniktech.maven.publish'
}
 
allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    // Tell idea to output to build/classes/main instead of /out/
    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }
}
